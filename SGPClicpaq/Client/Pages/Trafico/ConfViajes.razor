@page "/confirmaviajes"
<h1>Viajes para confirmar</h1>
<p>Descripción</p>
<hr />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" EmptyText="No hay viajes para mostrar."
                Data="@oRespuesta.List" TItem="Viaje" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Viaje" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Viaje" Property="ZonaDestino" Title="Zona de destino" Width="120px" />
        <RadzenDataGridColumn TItem="Viaje" Property="Unidad" Title="Unidad" Width="80px" />
        <RadzenDataGridColumn TItem="Viaje" Property="Chofer" Title="Chofer" Width="80px" />
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <button class="btn btn-outline-danger" @onclick="() => alertaDevolverTrafico(data.Id)"><FeatherArrowLeft Color="black"></FeatherArrowLeft></button>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <button class="btn btn-outline-danger" @onclick="() => alertaDevolverDepo(data.Id)"><FeatherPackage Color="black"></FeatherPackage></button>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <button class="btn btn-outline-success" @onclick="() => alertaConfirmar(data.Id)"><FeatherSend Color="black"></FeatherSend></button>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Viaje" Property="" Title="" Frozen="true" Sortable="false" Filterable="false" Width="50px">
            <Template Context="data">
                <button class="btn btn-outline-primary" @onclick="() => info(data.Id)"><FeatherInfo Color="black"></FeatherInfo></button>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    Respuesta<List<Viaje>> oRespuesta = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Viaje>>>("/api/Viaje");
        oRespuesta = respuesta;
        oRespuesta.List = respuesta.List.Where(x => x.Estado == "ParaConfirmar").ToList();
        StateHasChanged();
    }

    async Task Confirmar(int id)
    {
        var oRta = await http.GetFromJsonAsync<Respuesta<Viaje>>($"/api/Viaje/{id}");
        var oViaje = oRta.List;
        oViaje.Estado = "Confirmado";
        await http.PutAsJsonAsync<Viaje>("api/viaje", oViaje);
        await Get();
    }

    async Task Devolver(int id, string a)
    {
        var oRta = await http.GetFromJsonAsync<Respuesta<Viaje>>($"/api/Viaje/{id}");
        var oViaje = oRta.List;
        oViaje.Estado = a;
        await http.PutAsJsonAsync<Viaje>("api/viaje", oViaje);
        await Get();
    }

    async Task alertaConfirmar(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Este viaje se confirmará",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Confirmar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Devolver(id, "Confirmado");
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task alertaDevolverDepo(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Este viaje volvera al deposito",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Devolver",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Devolver(id, "Deposito");
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task alertaDevolverTrafico(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Este viaje volverá a tráfico",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Confirmar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Devolver(id, "Creado");
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task info(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ModalInfo.id), id);
        var options = new ModalOptions()
            {
                HideHeader = true
            };

        var formModal = Modal.Show<ModalInfo>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
            StateHasChanged();
        }


    }
}
